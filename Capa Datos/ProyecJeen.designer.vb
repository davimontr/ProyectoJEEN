'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="JEEN")>  _
Partial Public Class ProyecJeenDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertClientes(instance As Clientes)
    End Sub
  Partial Private Sub UpdateClientes(instance As Clientes)
    End Sub
  Partial Private Sub DeleteClientes(instance As Clientes)
    End Sub
  Partial Private Sub InsertCompras(instance As Compras)
    End Sub
  Partial Private Sub UpdateCompras(instance As Compras)
    End Sub
  Partial Private Sub DeleteCompras(instance As Compras)
    End Sub
  Partial Private Sub InsertFacturas_Prestamos(instance As Facturas_Prestamos)
    End Sub
  Partial Private Sub UpdateFacturas_Prestamos(instance As Facturas_Prestamos)
    End Sub
  Partial Private Sub DeleteFacturas_Prestamos(instance As Facturas_Prestamos)
    End Sub
  Partial Private Sub InsertProveedores(instance As Proveedores)
    End Sub
  Partial Private Sub UpdateProveedores(instance As Proveedores)
    End Sub
  Partial Private Sub DeleteProveedores(instance As Proveedores)
    End Sub
  Partial Private Sub InsertTipos_Usuario(instance As Tipos_Usuario)
    End Sub
  Partial Private Sub UpdateTipos_Usuario(instance As Tipos_Usuario)
    End Sub
  Partial Private Sub DeleteTipos_Usuario(instance As Tipos_Usuario)
    End Sub
  Partial Private Sub InsertUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub UpdateUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub DeleteUsuarios(instance As Usuarios)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Capa_Datos.My.MySettings.Default.JEENConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Clientes() As System.Data.Linq.Table(Of Clientes)
		Get
			Return Me.GetTable(Of Clientes)
		End Get
	End Property
	
	Public ReadOnly Property Compras() As System.Data.Linq.Table(Of Compras)
		Get
			Return Me.GetTable(Of Compras)
		End Get
	End Property
	
	Public ReadOnly Property Facturas_Prestamos() As System.Data.Linq.Table(Of Facturas_Prestamos)
		Get
			Return Me.GetTable(Of Facturas_Prestamos)
		End Get
	End Property
	
	Public ReadOnly Property Proveedores() As System.Data.Linq.Table(Of Proveedores)
		Get
			Return Me.GetTable(Of Proveedores)
		End Get
	End Property
	
	Public ReadOnly Property Tipos_Usuario() As System.Data.Linq.Table(Of Tipos_Usuario)
		Get
			Return Me.GetTable(Of Tipos_Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Usuarios() As System.Data.Linq.Table(Of Usuarios)
		Get
			Return Me.GetTable(Of Usuarios)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes")>  _
Partial Public Class Clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente As Integer
	
	Private _Cliente As String
	
	Private _Facturas_Prestamos As EntitySet(Of Facturas_Prestamos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnClienteChanging(value As String)
    End Sub
    Partial Private Sub OnClienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Facturas_Prestamos = New EntitySet(Of Facturas_Prestamos)(AddressOf Me.attach_Facturas_Prestamos, AddressOf Me.detach_Facturas_Prestamos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Cliente() As String
		Get
			Return Me._Cliente
		End Get
		Set
			If (String.Equals(Me._Cliente, value) = false) Then
				Me.OnClienteChanging(value)
				Me.SendPropertyChanging
				Me._Cliente = value
				Me.SendPropertyChanged("Cliente")
				Me.OnClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_Facturas_Prestamos", Storage:="_Facturas_Prestamos", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Facturas_Prestamos() As EntitySet(Of Facturas_Prestamos)
		Get
			Return Me._Facturas_Prestamos
		End Get
		Set
			Me._Facturas_Prestamos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Facturas_Prestamos(ByVal entity As Facturas_Prestamos)
		Me.SendPropertyChanging
		entity.Clientes = Me
	End Sub
	
	Private Sub detach_Facturas_Prestamos(ByVal entity As Facturas_Prestamos)
		Me.SendPropertyChanging
		entity.Clientes = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Compras")>  _
Partial Public Class Compras
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Compras As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Fecha As Date
	
	Private _NumFactura As Integer
	
	Private _Producto As String
	
	Private _Cantidad As Integer
	
	Private _Precio As Integer
	
	Private _SubTotal As Integer
	
	Private _Descuento As Integer
	
	Private _Total As Integer
	
	Private _Proveedores As EntityRef(Of Proveedores)
	
	Private _Usuarios As EntityRef(Of Usuarios)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ComprasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ComprasChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnNumFacturaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumFacturaChanged()
    End Sub
    Partial Private Sub OnProductoChanging(value As String)
    End Sub
    Partial Private Sub OnProductoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As Integer)
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedores = CType(Nothing, EntityRef(Of Proveedores))
		Me._Usuarios = CType(Nothing, EntityRef(Of Usuarios))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Compras", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Compras() As Integer
		Get
			Return Me._ID_Compras
		End Get
		Set
			If ((Me._ID_Compras = value)  _
						= false) Then
				Me.OnID_ComprasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Compras = value
				Me.SendPropertyChanged("ID_Compras")
				Me.OnID_ComprasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL")>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuarios.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFactura", DbType:="Int NOT NULL")>  _
	Public Property NumFactura() As Integer
		Get
			Return Me._NumFactura
		End Get
		Set
			If ((Me._NumFactura = value)  _
						= false) Then
				Me.OnNumFacturaChanging(value)
				Me.SendPropertyChanging
				Me._NumFactura = value
				Me.SendPropertyChanged("NumFactura")
				Me.OnNumFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Producto", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Producto() As String
		Get
			Return Me._Producto
		End Get
		Set
			If (String.Equals(Me._Producto, value) = false) Then
				Me.OnProductoChanging(value)
				Me.SendPropertyChanging
				Me._Producto = value
				Me.SendPropertyChanged("Producto")
				Me.OnProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Int NOT NULL")>  _
	Public Property Cantidad() As Integer
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Int NOT NULL")>  _
	Public Property Precio() As Integer
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Int NOT NULL")>  _
	Public Property SubTotal() As Integer
		Get
			Return Me._SubTotal
		End Get
		Set
			If ((Me._SubTotal = value)  _
						= false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Int NOT NULL")>  _
	Public Property Descuento() As Integer
		Get
			Return Me._Descuento
		End Get
		Set
			If ((Me._Descuento = value)  _
						= false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int NOT NULL")>  _
	Public Property Total() As Integer
		Get
			Return Me._Total
		End Get
		Set
			If ((Me._Total = value)  _
						= false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedores_Compras", Storage:="_Proveedores", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedores() As Proveedores
		Get
			Return Me._Proveedores.Entity
		End Get
		Set
			Dim previousValue As Proveedores = Me._Proveedores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedores.Entity = Nothing
					previousValue.Compras.Remove(Me)
				End If
				Me._Proveedores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Compras.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedores")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuarios_Compras", Storage:="_Usuarios", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuarios() As Usuarios
		Get
			Return Me._Usuarios.Entity
		End Get
		Set
			Dim previousValue As Usuarios = Me._Usuarios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuarios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuarios.Entity = Nothing
					previousValue.Compras.Remove(Me)
				End If
				Me._Usuarios.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Compras.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuarios")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Facturas_Prestamos")>  _
Partial Public Class Facturas_Prestamos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Prestamos As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Cedula As String
	
	Private _Fecha_Prestamo As Date
	
	Private _Monto As Integer
	
	Private _Plazo As Integer
	
	Private _Taza As Integer
	
	Private _Clientes As EntityRef(Of Clientes)
	
	Private _Usuarios As EntityRef(Of Usuarios)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PrestamosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrestamosChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnCedulaChanging(value As String)
    End Sub
    Partial Private Sub OnCedulaChanged()
    End Sub
    Partial Private Sub OnFecha_PrestamoChanging(value As Date)
    End Sub
    Partial Private Sub OnFecha_PrestamoChanged()
    End Sub
    Partial Private Sub OnMontoChanging(value As Integer)
    End Sub
    Partial Private Sub OnMontoChanged()
    End Sub
    Partial Private Sub OnPlazoChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlazoChanged()
    End Sub
    Partial Private Sub OnTazaChanging(value As Integer)
    End Sub
    Partial Private Sub OnTazaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clientes = CType(Nothing, EntityRef(Of Clientes))
		Me._Usuarios = CType(Nothing, EntityRef(Of Usuarios))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prestamos", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Prestamos() As Integer
		Get
			Return Me._ID_Prestamos
		End Get
		Set
			If ((Me._ID_Prestamos = value)  _
						= false) Then
				Me.OnID_PrestamosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prestamos = value
				Me.SendPropertyChanged("ID_Prestamos")
				Me.OnID_PrestamosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Clientes.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuarios.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cedula", DbType:="NChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Cedula() As String
		Get
			Return Me._Cedula
		End Get
		Set
			If (String.Equals(Me._Cedula, value) = false) Then
				Me.OnCedulaChanging(value)
				Me.SendPropertyChanging
				Me._Cedula = value
				Me.SendPropertyChanged("Cedula")
				Me.OnCedulaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Prestamo", DbType:="Date NOT NULL")>  _
	Public Property Fecha_Prestamo() As Date
		Get
			Return Me._Fecha_Prestamo
		End Get
		Set
			If ((Me._Fecha_Prestamo = value)  _
						= false) Then
				Me.OnFecha_PrestamoChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Prestamo = value
				Me.SendPropertyChanged("Fecha_Prestamo")
				Me.OnFecha_PrestamoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monto", DbType:="Int NOT NULL")>  _
	Public Property Monto() As Integer
		Get
			Return Me._Monto
		End Get
		Set
			If ((Me._Monto = value)  _
						= false) Then
				Me.OnMontoChanging(value)
				Me.SendPropertyChanging
				Me._Monto = value
				Me.SendPropertyChanged("Monto")
				Me.OnMontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Plazo", DbType:="Int NOT NULL")>  _
	Public Property Plazo() As Integer
		Get
			Return Me._Plazo
		End Get
		Set
			If ((Me._Plazo = value)  _
						= false) Then
				Me.OnPlazoChanging(value)
				Me.SendPropertyChanging
				Me._Plazo = value
				Me.SendPropertyChanged("Plazo")
				Me.OnPlazoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Taza", DbType:="Int NOT NULL")>  _
	Public Property Taza() As Integer
		Get
			Return Me._Taza
		End Get
		Set
			If ((Me._Taza = value)  _
						= false) Then
				Me.OnTazaChanging(value)
				Me.SendPropertyChanging
				Me._Taza = value
				Me.SendPropertyChanged("Taza")
				Me.OnTazaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_Facturas_Prestamos", Storage:="_Clientes", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Clientes() As Clientes
		Get
			Return Me._Clientes.Entity
		End Get
		Set
			Dim previousValue As Clientes = Me._Clientes.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Clientes.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Clientes.Entity = Nothing
					previousValue.Facturas_Prestamos.Remove(Me)
				End If
				Me._Clientes.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Facturas_Prestamos.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Clientes")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuarios_Facturas_Prestamos", Storage:="_Usuarios", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuarios() As Usuarios
		Get
			Return Me._Usuarios.Entity
		End Get
		Set
			Dim previousValue As Usuarios = Me._Usuarios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuarios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuarios.Entity = Nothing
					previousValue.Facturas_Prestamos.Remove(Me)
				End If
				Me._Usuarios.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Facturas_Prestamos.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuarios")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedores")>  _
Partial Public Class Proveedores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor As Integer
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Correo As String
	
	Private _CedulaJuridica As String
	
	Private _Direccion As String
	
	Private _Compras As EntitySet(Of Compras)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnCorreoChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoChanged()
    End Sub
    Partial Private Sub OnCedulaJuridicaChanging(value As String)
    End Sub
    Partial Private Sub OnCedulaJuridicaChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Compras = New EntitySet(Of Compras)(AddressOf Me.attach_Compras, AddressOf Me.detach_Compras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Correo", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Correo() As String
		Get
			Return Me._Correo
		End Get
		Set
			If (String.Equals(Me._Correo, value) = false) Then
				Me.OnCorreoChanging(value)
				Me.SendPropertyChanging
				Me._Correo = value
				Me.SendPropertyChanged("Correo")
				Me.OnCorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CedulaJuridica", DbType:="NChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property CedulaJuridica() As String
		Get
			Return Me._CedulaJuridica
		End Get
		Set
			If (String.Equals(Me._CedulaJuridica, value) = false) Then
				Me.OnCedulaJuridicaChanging(value)
				Me.SendPropertyChanging
				Me._CedulaJuridica = value
				Me.SendPropertyChanged("CedulaJuridica")
				Me.OnCedulaJuridicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedores_Compras", Storage:="_Compras", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Compras() As EntitySet(Of Compras)
		Get
			Return Me._Compras
		End Get
		Set
			Me._Compras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Compras(ByVal entity As Compras)
		Me.SendPropertyChanging
		entity.Proveedores = Me
	End Sub
	
	Private Sub detach_Compras(ByVal entity As Compras)
		Me.SendPropertyChanging
		entity.Proveedores = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Usuario")>  _
Partial Public Class Tipos_Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_TipoUsu As Integer
	
	Private _Nombre As String
	
	Private _Usuarios As EntitySet(Of Usuarios)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TipoUsuChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoUsuChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuarios = New EntitySet(Of Usuarios)(AddressOf Me.attach_Usuarios, AddressOf Me.detach_Usuarios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoUsu", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_TipoUsu() As Integer
		Get
			Return Me._ID_TipoUsu
		End Get
		Set
			If ((Me._ID_TipoUsu = value)  _
						= false) Then
				Me.OnID_TipoUsuChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoUsu = value
				Me.SendPropertyChanged("ID_TipoUsu")
				Me.OnID_TipoUsuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Usuario_Usuarios", Storage:="_Usuarios", ThisKey:="ID_TipoUsu", OtherKey:="ID_Tipo")>  _
	Public Property Usuarios() As EntitySet(Of Usuarios)
		Get
			Return Me._Usuarios
		End Get
		Set
			Me._Usuarios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Usuarios(ByVal entity As Usuarios)
		Me.SendPropertyChanging
		entity.Tipos_Usuario = Me
	End Sub
	
	Private Sub detach_Usuarios(ByVal entity As Usuarios)
		Me.SendPropertyChanging
		entity.Tipos_Usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuarios")>  _
Partial Public Class Usuarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Usuario As Integer
	
	Private _Nombre As String
	
	Private _Contrasenna As String
	
	Private _Usu As String
	
	Private _ID_Tipo As Integer
	
	Private _Compras As EntitySet(Of Compras)
	
	Private _Facturas_Prestamos As EntitySet(Of Facturas_Prestamos)
	
	Private _Tipos_Usuario As EntityRef(Of Tipos_Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnContrasennaChanging(value As String)
    End Sub
    Partial Private Sub OnContrasennaChanged()
    End Sub
    Partial Private Sub OnUsuChanging(value As String)
    End Sub
    Partial Private Sub OnUsuChanged()
    End Sub
    Partial Private Sub OnID_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Compras = New EntitySet(Of Compras)(AddressOf Me.attach_Compras, AddressOf Me.detach_Compras)
		Me._Facturas_Prestamos = New EntitySet(Of Facturas_Prestamos)(AddressOf Me.attach_Facturas_Prestamos, AddressOf Me.detach_Facturas_Prestamos)
		Me._Tipos_Usuario = CType(Nothing, EntityRef(Of Tipos_Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contrasenna", DbType:="NChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Contrasenna() As String
		Get
			Return Me._Contrasenna
		End Get
		Set
			If (String.Equals(Me._Contrasenna, value) = false) Then
				Me.OnContrasennaChanging(value)
				Me.SendPropertyChanging
				Me._Contrasenna = value
				Me.SendPropertyChanged("Contrasenna")
				Me.OnContrasennaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usu", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Usu() As String
		Get
			Return Me._Usu
		End Get
		Set
			If (String.Equals(Me._Usu, value) = false) Then
				Me.OnUsuChanging(value)
				Me.SendPropertyChanging
				Me._Usu = value
				Me.SendPropertyChanged("Usu")
				Me.OnUsuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_Tipo() As Integer
		Get
			Return Me._ID_Tipo
		End Get
		Set
			If ((Me._ID_Tipo = value)  _
						= false) Then
				If Me._Tipos_Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Tipo = value
				Me.SendPropertyChanged("ID_Tipo")
				Me.OnID_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuarios_Compras", Storage:="_Compras", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Compras() As EntitySet(Of Compras)
		Get
			Return Me._Compras
		End Get
		Set
			Me._Compras.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuarios_Facturas_Prestamos", Storage:="_Facturas_Prestamos", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Facturas_Prestamos() As EntitySet(Of Facturas_Prestamos)
		Get
			Return Me._Facturas_Prestamos
		End Get
		Set
			Me._Facturas_Prestamos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Usuario_Usuarios", Storage:="_Tipos_Usuario", ThisKey:="ID_Tipo", OtherKey:="ID_TipoUsu", IsForeignKey:=true)>  _
	Public Property Tipos_Usuario() As Tipos_Usuario
		Get
			Return Me._Tipos_Usuario.Entity
		End Get
		Set
			Dim previousValue As Tipos_Usuario = Me._Tipos_Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Usuario.Entity = Nothing
					previousValue.Usuarios.Remove(Me)
				End If
				Me._Tipos_Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuarios.Add(Me)
					Me._ID_Tipo = value.ID_TipoUsu
				Else
					Me._ID_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tipos_Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Compras(ByVal entity As Compras)
		Me.SendPropertyChanging
		entity.Usuarios = Me
	End Sub
	
	Private Sub detach_Compras(ByVal entity As Compras)
		Me.SendPropertyChanging
		entity.Usuarios = Nothing
	End Sub
	
	Private Sub attach_Facturas_Prestamos(ByVal entity As Facturas_Prestamos)
		Me.SendPropertyChanging
		entity.Usuarios = Me
	End Sub
	
	Private Sub detach_Facturas_Prestamos(ByVal entity As Facturas_Prestamos)
		Me.SendPropertyChanging
		entity.Usuarios = Nothing
	End Sub
End Class
